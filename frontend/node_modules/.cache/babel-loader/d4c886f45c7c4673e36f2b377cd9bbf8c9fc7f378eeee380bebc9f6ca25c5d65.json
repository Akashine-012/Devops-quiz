{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\NITHISH.P\\\\OneDrive\\\\Desktop\\\\Devops_Final_Project\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport questionBankData from \"./components/QuestionBank\";\nimport Questions from './components/Questions';\nimport Score from './components/Score';\nimport Login from './components/Login';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst shuffleArray = array => {\n  return array.map(item => ({\n    item,\n    sort: Math.random()\n  })).sort((a, b) => a.sort - b.sort).map(({\n    item\n  }) => item);\n};\nconst App = () => {\n  _s();\n  const [username, setUsername] = useState(null);\n  const [selectedLanguage, setSelectedLanguage] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [shuffledQuestions, setShuffledQuestions] = useState([]);\n  const [score, setScore] = useState(0);\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [wrongAnswers, setWrongAnswers] = useState(0);\n  const [skippedAnswers, setSkippedAnswers] = useState(0);\n  const [timer, setTimer] = useState(15); // Set initial timer to 15 seconds\n  const [quizStarted, setQuizStarted] = useState(false);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [quizCompleted, setQuizCompleted] = useState(false);\n  const handleNextQuestion = useCallback(() => {\n    if (selectedAnswer === null) {\n      setSkippedAnswers(prev => prev + 1);\n    }\n    if (currentQuestion + 1 < shuffledQuestions.length) {\n      setCurrentQuestion(prevQuestion => prevQuestion + 1);\n      setTimer(15); // Reset timer to 15 seconds for the next question\n      setSelectedAnswer(null);\n    } else {\n      setQuizStarted(false);\n      setQuizCompleted(true);\n    }\n  }, [currentQuestion, selectedAnswer, shuffledQuestions]);\n  useEffect(() => {\n    if (quizStarted) {\n      const interval = setInterval(() => {\n        setTimer(prevTimer => {\n          if (prevTimer > 0) {\n            return prevTimer - 1;\n          } else {\n            handleNextQuestion();\n            return 15;\n          }\n        });\n      }, 1000);\n      return () => clearInterval(interval);\n    }\n  }, [quizStarted, handleNextQuestion]);\n  const handleAnswerClick = selectedAnswer => {\n    setSelectedAnswer(selectedAnswer);\n    if (selectedAnswer === shuffledQuestions[currentQuestion].answer) {\n      setScore(prevScore => prevScore + 1);\n      setCorrectAnswers(prev => prev + 1);\n    } else {\n      setWrongAnswers(prev => prev + 1);\n    }\n  };\n  const startQuiz = () => {\n    setCurrentQuestion(0);\n    setScore(0);\n    setTimer(15); // Reset timer to 15 seconds when starting a new quiz\n    setQuizStarted(true);\n    setQuizCompleted(false);\n    setSelectedAnswer(null);\n    setCorrectAnswers(0);\n    setWrongAnswers(0);\n    setSkippedAnswers(0);\n\n    // Shuffle questions when starting quiz\n    setShuffledQuestions(shuffleArray(questionBankData[selectedLanguage]));\n  };\n  const handleLogin = async (username, language) => {\n    // Try to register the user first (optional, or you can have a separate registration)\n    await fetch('http://localhost:3001/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        language\n      })\n    });\n\n    // Then try to login\n    const response = await fetch('http://localhost:3001/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        language\n      })\n    });\n    const data = await response.json();\n    if (response.ok) {\n      setUsername(username);\n      setSelectedLanguage(language);\n    } else {\n      alert(data.message || 'Login failed');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card text-center quiz-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"quiz-title\",\n        children: \"Welcome to the\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"quiz-subtitle\",\n        children: \"Quiz App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), !username ? /*#__PURE__*/_jsxDEV(Login, {\n        handleLogin: handleLogin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: !quizStarted && !quizCompleted ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"greeting\",\n            children: [\"Hello, \", username, \"!\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary start-btn\",\n            onClick: startQuiz,\n            children: [\"Start Quiz for \", selectedLanguage]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true) : quizStarted ? selectedLanguage && shuffledQuestions && currentQuestion < shuffledQuestions.length ? /*#__PURE__*/_jsxDEV(Questions, {\n          questions: shuffledQuestions,\n          currentQuestion: currentQuestion,\n          handleAnswerClick: handleAnswerClick,\n          timer: timer,\n          selectedAnswer: selectedAnswer,\n          handleNextQuestion: handleNextQuestion\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 33\n        }, this) : null : /*#__PURE__*/_jsxDEV(Score, {\n          score: score,\n          totalQuestions: shuffledQuestions.length,\n          correctAnswers: correctAnswers,\n          wrongAnswers: wrongAnswers,\n          skippedAnswers: skippedAnswers,\n          setCurrentQuestion: setCurrentQuestion,\n          setQuizStarted: setQuizStarted,\n          selectedLanguage: selectedLanguage,\n          setScore: setScore,\n          startQuiz: startQuiz\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"Z4dSjNZ+WAK91yqATeELUawAOV8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","questionBankData","Questions","Score","Login","jsxDEV","_jsxDEV","Fragment","_Fragment","shuffleArray","array","map","item","sort","Math","random","a","b","App","_s","username","setUsername","selectedLanguage","setSelectedLanguage","currentQuestion","setCurrentQuestion","shuffledQuestions","setShuffledQuestions","score","setScore","correctAnswers","setCorrectAnswers","wrongAnswers","setWrongAnswers","skippedAnswers","setSkippedAnswers","timer","setTimer","quizStarted","setQuizStarted","selectedAnswer","setSelectedAnswer","quizCompleted","setQuizCompleted","handleNextQuestion","prev","length","prevQuestion","interval","setInterval","prevTimer","clearInterval","handleAnswerClick","answer","prevScore","startQuiz","handleLogin","language","fetch","method","headers","body","JSON","stringify","response","data","json","ok","alert","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","questions","totalQuestions","_c","$RefreshReg$"],"sources":["C:/Users/NITHISH.P/OneDrive/Desktop/Devops_Final_Project/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport questionBankData from \"./components/QuestionBank\";\nimport Questions from './components/Questions';\nimport Score from './components/Score';\nimport Login from './components/Login';\nimport './App.css';\n\nconst shuffleArray = (array) => {\n    return array\n        .map((item) => ({ item, sort: Math.random() }))\n        .sort((a, b) => a.sort - b.sort)\n        .map(({ item }) => item);\n};\n\nconst App = () => {\n    const [username, setUsername] = useState(null);\n    const [selectedLanguage, setSelectedLanguage] = useState(null);\n    const [currentQuestion, setCurrentQuestion] = useState(0);\n    const [shuffledQuestions, setShuffledQuestions] = useState([]);\n    const [score, setScore] = useState(0);\n    const [correctAnswers, setCorrectAnswers] = useState(0);\n    const [wrongAnswers, setWrongAnswers] = useState(0);\n    const [skippedAnswers, setSkippedAnswers] = useState(0);\n    const [timer, setTimer] = useState(15);  // Set initial timer to 15 seconds\n    const [quizStarted, setQuizStarted] = useState(false);\n    const [selectedAnswer, setSelectedAnswer] = useState(null);\n    const [quizCompleted, setQuizCompleted] = useState(false);\n\n    const handleNextQuestion = useCallback(() => {\n        if (selectedAnswer === null) {\n            setSkippedAnswers(prev => prev + 1);\n        }\n\n        if (currentQuestion + 1 < shuffledQuestions.length) {\n            setCurrentQuestion(prevQuestion => prevQuestion + 1);\n            setTimer(15);  // Reset timer to 15 seconds for the next question\n            setSelectedAnswer(null);\n        } else {\n            setQuizStarted(false);\n            setQuizCompleted(true);\n        }\n    }, [currentQuestion, selectedAnswer, shuffledQuestions]);\n\n    useEffect(() => {\n        if (quizStarted) {\n            const interval = setInterval(() => {\n                setTimer(prevTimer => {\n                    if (prevTimer > 0) {\n                        return prevTimer - 1;\n                    } else {\n                        handleNextQuestion();\n                        return 15;\n                    }\n                });\n            }, 1000);\n            return () => clearInterval(interval);\n        }\n    }, [quizStarted, handleNextQuestion]);\n\n    const handleAnswerClick = (selectedAnswer) => {\n        setSelectedAnswer(selectedAnswer);\n        if (selectedAnswer === shuffledQuestions[currentQuestion].answer) {\n            setScore(prevScore => prevScore + 1);\n            setCorrectAnswers(prev => prev + 1);\n        } else {\n            setWrongAnswers(prev => prev + 1);\n        }\n    };\n\n    const startQuiz = () => {\n        setCurrentQuestion(0);\n        setScore(0);\n        setTimer(15);  // Reset timer to 15 seconds when starting a new quiz\n        setQuizStarted(true);\n        setQuizCompleted(false);\n        setSelectedAnswer(null);\n        setCorrectAnswers(0);\n        setWrongAnswers(0);\n        setSkippedAnswers(0);\n\n        // Shuffle questions when starting quiz\n        setShuffledQuestions(shuffleArray(questionBankData[selectedLanguage]));\n    };\n\n    const handleLogin = async (username, language) => {\n        // Try to register the user first (optional, or you can have a separate registration)\n        await fetch('http://localhost:3001/register', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ username, language })\n        });\n\n        // Then try to login\n        const response = await fetch('http://localhost:3001/login', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ username, language })\n        });\n        const data = await response.json();\n\n        if (response.ok) {\n            setUsername(username);\n            setSelectedLanguage(language);\n        } else {\n            alert(data.message || 'Login failed');\n        }\n    };\n\n    return (\n        <div className=\"app-container\">\n            <div className=\"card text-center quiz-card\">\n                <h1 className=\"quiz-title\">Welcome to the</h1>\n                <h2 className=\"quiz-subtitle\">Quiz App</h2>\n\n                {!username ? (\n                    <Login handleLogin={handleLogin} />\n                ) : (\n                    <div>\n                        {!quizStarted && !quizCompleted ? (\n                            <>\n                                <h3 className=\"greeting\">Hello, {username}!</h3>\n                                <button className=\"btn btn-primary start-btn\" onClick={startQuiz}>\n                                    Start Quiz for {selectedLanguage}\n                                </button>\n                            </>\n                        ) : quizStarted ? (\n                            selectedLanguage && shuffledQuestions && currentQuestion < shuffledQuestions.length ? (\n                                <Questions\n                                    questions={shuffledQuestions}\n                                    currentQuestion={currentQuestion}\n                                    handleAnswerClick={handleAnswerClick}\n                                    timer={timer}\n                                    selectedAnswer={selectedAnswer}\n                                    handleNextQuestion={handleNextQuestion}\n                                />\n                            ) : null\n                        ) : (\n                            <Score\n                                score={score}\n                                totalQuestions={shuffledQuestions.length}\n                                correctAnswers={correctAnswers}\n                                wrongAnswers={wrongAnswers}\n                                skippedAnswers={skippedAnswers}\n                                setCurrentQuestion={setCurrentQuestion}\n                                setQuizStarted={setQuizStarted}\n                                selectedLanguage={selectedLanguage}\n                                setScore={setScore}\n                                startQuiz={startQuiz}\n                            />\n                        )}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,OAAO,sCAAsC;AAC7C,OAAOC,gBAAgB,MAAM,2BAA2B;AACxD,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnB,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAC5B,OAAOA,KAAK,CACPC,GAAG,CAAEC,IAAI,KAAM;IAAEA,IAAI;IAAEC,IAAI,EAAEC,IAAI,CAACC,MAAM,CAAC;EAAE,CAAC,CAAC,CAAC,CAC9CF,IAAI,CAAC,CAACG,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACH,IAAI,GAAGI,CAAC,CAACJ,IAAI,CAAC,CAC/BF,GAAG,CAAC,CAAC;IAAEC;EAAK,CAAC,KAAKA,IAAI,CAAC;AAChC,CAAC;AAED,MAAMM,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACd,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACwB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAAC0B,eAAe,EAAEC,kBAAkB,CAAC,GAAG3B,QAAQ,CAAC,CAAC,CAAC;EACzD,MAAM,CAAC4B,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAAC8B,KAAK,EAAEC,QAAQ,CAAC,GAAG/B,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACgC,cAAc,EAAEC,iBAAiB,CAAC,GAAGjC,QAAQ,CAAC,CAAC,CAAC;EACvD,MAAM,CAACkC,YAAY,EAAEC,eAAe,CAAC,GAAGnC,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACoC,cAAc,EAAEC,iBAAiB,CAAC,GAAGrC,QAAQ,CAAC,CAAC,CAAC;EACvD,MAAM,CAACsC,KAAK,EAAEC,QAAQ,CAAC,GAAGvC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;EACzC,MAAM,CAACwC,WAAW,EAAEC,cAAc,CAAC,GAAGzC,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAAC0C,cAAc,EAAEC,iBAAiB,CAAC,GAAG3C,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAAC4C,aAAa,EAAEC,gBAAgB,CAAC,GAAG7C,QAAQ,CAAC,KAAK,CAAC;EAEzD,MAAM8C,kBAAkB,GAAG5C,WAAW,CAAC,MAAM;IACzC,IAAIwC,cAAc,KAAK,IAAI,EAAE;MACzBL,iBAAiB,CAACU,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;IACvC;IAEA,IAAIrB,eAAe,GAAG,CAAC,GAAGE,iBAAiB,CAACoB,MAAM,EAAE;MAChDrB,kBAAkB,CAACsB,YAAY,IAAIA,YAAY,GAAG,CAAC,CAAC;MACpDV,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;MACfI,iBAAiB,CAAC,IAAI,CAAC;IAC3B,CAAC,MAAM;MACHF,cAAc,CAAC,KAAK,CAAC;MACrBI,gBAAgB,CAAC,IAAI,CAAC;IAC1B;EACJ,CAAC,EAAE,CAACnB,eAAe,EAAEgB,cAAc,EAAEd,iBAAiB,CAAC,CAAC;EAExD3B,SAAS,CAAC,MAAM;IACZ,IAAIuC,WAAW,EAAE;MACb,MAAMU,QAAQ,GAAGC,WAAW,CAAC,MAAM;QAC/BZ,QAAQ,CAACa,SAAS,IAAI;UAClB,IAAIA,SAAS,GAAG,CAAC,EAAE;YACf,OAAOA,SAAS,GAAG,CAAC;UACxB,CAAC,MAAM;YACHN,kBAAkB,CAAC,CAAC;YACpB,OAAO,EAAE;UACb;QACJ,CAAC,CAAC;MACN,CAAC,EAAE,IAAI,CAAC;MACR,OAAO,MAAMO,aAAa,CAACH,QAAQ,CAAC;IACxC;EACJ,CAAC,EAAE,CAACV,WAAW,EAAEM,kBAAkB,CAAC,CAAC;EAErC,MAAMQ,iBAAiB,GAAIZ,cAAc,IAAK;IAC1CC,iBAAiB,CAACD,cAAc,CAAC;IACjC,IAAIA,cAAc,KAAKd,iBAAiB,CAACF,eAAe,CAAC,CAAC6B,MAAM,EAAE;MAC9DxB,QAAQ,CAACyB,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC;MACpCvB,iBAAiB,CAACc,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;IACvC,CAAC,MAAM;MACHZ,eAAe,CAACY,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;IACrC;EACJ,CAAC;EAED,MAAMU,SAAS,GAAGA,CAAA,KAAM;IACpB9B,kBAAkB,CAAC,CAAC,CAAC;IACrBI,QAAQ,CAAC,CAAC,CAAC;IACXQ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;IACfE,cAAc,CAAC,IAAI,CAAC;IACpBI,gBAAgB,CAAC,KAAK,CAAC;IACvBF,iBAAiB,CAAC,IAAI,CAAC;IACvBV,iBAAiB,CAAC,CAAC,CAAC;IACpBE,eAAe,CAAC,CAAC,CAAC;IAClBE,iBAAiB,CAAC,CAAC,CAAC;;IAEpB;IACAR,oBAAoB,CAAClB,YAAY,CAACR,gBAAgB,CAACqB,gBAAgB,CAAC,CAAC,CAAC;EAC1E,CAAC;EAED,MAAMkC,WAAW,GAAG,MAAAA,CAAOpC,QAAQ,EAAEqC,QAAQ,KAAK;IAC9C;IACA,MAAMC,KAAK,CAAC,gCAAgC,EAAE;MAC1CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAE3C,QAAQ;QAAEqC;MAAS,CAAC;IAC/C,CAAC,CAAC;;IAEF;IACA,MAAMO,QAAQ,GAAG,MAAMN,KAAK,CAAC,6BAA6B,EAAE;MACxDC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAE3C,QAAQ;QAAEqC;MAAS,CAAC;IAC/C,CAAC,CAAC;IACF,MAAMQ,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAI,CAAC,CAAC;IAElC,IAAIF,QAAQ,CAACG,EAAE,EAAE;MACb9C,WAAW,CAACD,QAAQ,CAAC;MACrBG,mBAAmB,CAACkC,QAAQ,CAAC;IACjC,CAAC,MAAM;MACHW,KAAK,CAACH,IAAI,CAACI,OAAO,IAAI,cAAc,CAAC;IACzC;EACJ,CAAC;EAED,oBACI/D,OAAA;IAAKgE,SAAS,EAAC,eAAe;IAAAC,QAAA,eAC1BjE,OAAA;MAAKgE,SAAS,EAAC,4BAA4B;MAAAC,QAAA,gBACvCjE,OAAA;QAAIgE,SAAS,EAAC,YAAY;QAAAC,QAAA,EAAC;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC9CrE,OAAA;QAAIgE,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAE1C,CAACvD,QAAQ,gBACNd,OAAA,CAACF,KAAK;QAACoD,WAAW,EAAEA;MAAY;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,gBAEnCrE,OAAA;QAAAiE,QAAA,EACK,CAACjC,WAAW,IAAI,CAACI,aAAa,gBAC3BpC,OAAA,CAAAE,SAAA;UAAA+D,QAAA,gBACIjE,OAAA;YAAIgE,SAAS,EAAC,UAAU;YAAAC,QAAA,GAAC,SAAO,EAACnD,QAAQ,EAAC,GAAC;UAAA;YAAAoD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAChDrE,OAAA;YAAQgE,SAAS,EAAC,2BAA2B;YAACM,OAAO,EAAErB,SAAU;YAAAgB,QAAA,GAAC,iBAC/C,EAACjD,gBAAgB;UAAA;YAAAkD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5B,CAAC;QAAA,eACX,CAAC,GACHrC,WAAW,GACXhB,gBAAgB,IAAII,iBAAiB,IAAIF,eAAe,GAAGE,iBAAiB,CAACoB,MAAM,gBAC/ExC,OAAA,CAACJ,SAAS;UACN2E,SAAS,EAAEnD,iBAAkB;UAC7BF,eAAe,EAAEA,eAAgB;UACjC4B,iBAAiB,EAAEA,iBAAkB;UACrChB,KAAK,EAAEA,KAAM;UACbI,cAAc,EAAEA,cAAe;UAC/BI,kBAAkB,EAAEA;QAAmB;UAAA4B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1C,CAAC,GACF,IAAI,gBAERrE,OAAA,CAACH,KAAK;UACFyB,KAAK,EAAEA,KAAM;UACbkD,cAAc,EAAEpD,iBAAiB,CAACoB,MAAO;UACzChB,cAAc,EAAEA,cAAe;UAC/BE,YAAY,EAAEA,YAAa;UAC3BE,cAAc,EAAEA,cAAe;UAC/BT,kBAAkB,EAAEA,kBAAmB;UACvCc,cAAc,EAAEA,cAAe;UAC/BjB,gBAAgB,EAAEA,gBAAiB;UACnCO,QAAQ,EAAEA,QAAS;UACnB0B,SAAS,EAAEA;QAAU;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxB;MACJ;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CACR;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACxD,EAAA,CA7IID,GAAG;AAAA6D,EAAA,GAAH7D,GAAG;AA+IT,eAAeA,GAAG;AAAC,IAAA6D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}